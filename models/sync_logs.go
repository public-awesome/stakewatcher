// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SyncLog is an object representing the database table.
type SyncLog struct {
	BlockHeight int64     `boil:"block_height" json:"blockHeight" toml:"blockHeight" yaml:"blockHeight"`
	Processed   bool      `boil:"processed" json:"processed" toml:"processed" yaml:"processed"`
	Retries     int       `boil:"retries" json:"retries" toml:"retries" yaml:"retries"`
	Step        int       `boil:"step" json:"step" toml:"step" yaml:"step"`
	NextRetry   null.Time `boil:"next_retry" json:"nextRetry,omitempty" toml:"nextRetry" yaml:"nextRetry,omitempty"`
	SyncedAt    null.Time `boil:"synced_at" json:"syncedAt,omitempty" toml:"syncedAt" yaml:"syncedAt,omitempty"`
	CreatedAt   time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *syncLogR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L syncLogL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyncLogColumns = struct {
	BlockHeight string
	Processed   string
	Retries     string
	Step        string
	NextRetry   string
	SyncedAt    string
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
}{
	BlockHeight: "block_height",
	Processed:   "processed",
	Retries:     "retries",
	Step:        "step",
	NextRetry:   "next_retry",
	SyncedAt:    "synced_at",
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
}

// Generated where

var SyncLogWhere = struct {
	BlockHeight whereHelperint64
	Processed   whereHelperbool
	Retries     whereHelperint
	Step        whereHelperint
	NextRetry   whereHelpernull_Time
	SyncedAt    whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	BlockHeight: whereHelperint64{field: "\"sync_logs\".\"block_height\""},
	Processed:   whereHelperbool{field: "\"sync_logs\".\"processed\""},
	Retries:     whereHelperint{field: "\"sync_logs\".\"retries\""},
	Step:        whereHelperint{field: "\"sync_logs\".\"step\""},
	NextRetry:   whereHelpernull_Time{field: "\"sync_logs\".\"next_retry\""},
	SyncedAt:    whereHelpernull_Time{field: "\"sync_logs\".\"synced_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"sync_logs\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"sync_logs\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"sync_logs\".\"deleted_at\""},
}

// SyncLogRels is where relationship names are stored.
var SyncLogRels = struct {
}{}

// syncLogR is where relationships are stored.
type syncLogR struct {
}

// NewStruct creates a new relationship struct
func (*syncLogR) NewStruct() *syncLogR {
	return &syncLogR{}
}

// syncLogL is where Load methods for each relationship are stored.
type syncLogL struct{}

var (
	syncLogAllColumns            = []string{"block_height", "processed", "retries", "step", "next_retry", "synced_at", "created_at", "updated_at", "deleted_at"}
	syncLogColumnsWithoutDefault = []string{"block_height", "next_retry", "synced_at", "deleted_at"}
	syncLogColumnsWithDefault    = []string{"processed", "retries", "step", "created_at", "updated_at"}
	syncLogPrimaryKeyColumns     = []string{"block_height"}
)

type (
	// SyncLogSlice is an alias for a slice of pointers to SyncLog.
	// This should generally be used opposed to []SyncLog.
	SyncLogSlice []*SyncLog

	syncLogQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syncLogType                 = reflect.TypeOf(&SyncLog{})
	syncLogMapping              = queries.MakeStructMapping(syncLogType)
	syncLogPrimaryKeyMapping, _ = queries.BindMapping(syncLogType, syncLogMapping, syncLogPrimaryKeyColumns)
	syncLogInsertCacheMut       sync.RWMutex
	syncLogInsertCache          = make(map[string]insertCache)
	syncLogUpdateCacheMut       sync.RWMutex
	syncLogUpdateCache          = make(map[string]updateCache)
	syncLogUpsertCacheMut       sync.RWMutex
	syncLogUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single syncLog record from the query.
func (q syncLogQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SyncLog, error) {
	o := &SyncLog{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sync_logs")
	}

	return o, nil
}

// All returns all SyncLog records from the query.
func (q syncLogQuery) All(ctx context.Context, exec boil.ContextExecutor) (SyncLogSlice, error) {
	var o []*SyncLog

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SyncLog slice")
	}

	return o, nil
}

// Count returns the count of all SyncLog records in the query.
func (q syncLogQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sync_logs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syncLogQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sync_logs exists")
	}

	return count > 0, nil
}

// SyncLogs retrieves all the records using an executor.
func SyncLogs(mods ...qm.QueryMod) syncLogQuery {
	mods = append(mods, qm.From("\"sync_logs\""))
	return syncLogQuery{NewQuery(mods...)}
}

// FindSyncLog retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyncLog(ctx context.Context, exec boil.ContextExecutor, blockHeight int64, selectCols ...string) (*SyncLog, error) {
	syncLogObj := &SyncLog{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sync_logs\" where \"block_height\"=$1", sel,
	)

	q := queries.Raw(query, blockHeight)

	err := q.Bind(ctx, exec, syncLogObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sync_logs")
	}

	return syncLogObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyncLog) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sync_logs provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(syncLogColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syncLogInsertCacheMut.RLock()
	cache, cached := syncLogInsertCache[key]
	syncLogInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syncLogAllColumns,
			syncLogColumnsWithDefault,
			syncLogColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syncLogType, syncLogMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syncLogType, syncLogMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sync_logs\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sync_logs\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sync_logs")
	}

	if !cached {
		syncLogInsertCacheMut.Lock()
		syncLogInsertCache[key] = cache
		syncLogInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SyncLog.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyncLog) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	syncLogUpdateCacheMut.RLock()
	cache, cached := syncLogUpdateCache[key]
	syncLogUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syncLogAllColumns,
			syncLogPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sync_logs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sync_logs\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syncLogPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syncLogType, syncLogMapping, append(wl, syncLogPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sync_logs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sync_logs")
	}

	if !cached {
		syncLogUpdateCacheMut.Lock()
		syncLogUpdateCache[key] = cache
		syncLogUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q syncLogQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sync_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sync_logs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyncLogSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syncLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sync_logs\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syncLogPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in syncLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all syncLog")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyncLog) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sync_logs provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(syncLogColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syncLogUpsertCacheMut.RLock()
	cache, cached := syncLogUpsertCache[key]
	syncLogUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			syncLogAllColumns,
			syncLogColumnsWithDefault,
			syncLogColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			syncLogAllColumns,
			syncLogPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sync_logs, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(syncLogPrimaryKeyColumns))
			copy(conflict, syncLogPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sync_logs\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(syncLogType, syncLogMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syncLogType, syncLogMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sync_logs")
	}

	if !cached {
		syncLogUpsertCacheMut.Lock()
		syncLogUpsertCache[key] = cache
		syncLogUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SyncLog record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyncLog) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SyncLog provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syncLogPrimaryKeyMapping)
	sql := "DELETE FROM \"sync_logs\" WHERE \"block_height\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sync_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sync_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syncLogQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no syncLogQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sync_logs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sync_logs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyncLogSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syncLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sync_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syncLogPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from syncLog slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sync_logs")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyncLog) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSyncLog(ctx, exec, o.BlockHeight)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyncLogSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyncLogSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syncLogPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sync_logs\".* FROM \"sync_logs\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syncLogPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SyncLogSlice")
	}

	*o = slice

	return nil
}

// SyncLogExists checks if the SyncLog row exists.
func SyncLogExists(ctx context.Context, exec boil.ContextExecutor, blockHeight int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sync_logs\" where \"block_height\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, blockHeight)
	}
	row := exec.QueryRowContext(ctx, sql, blockHeight)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sync_logs exists")
	}

	return exists, nil
}
