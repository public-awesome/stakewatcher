// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SlashingEvent is an object representing the database table.
type SlashingEvent struct {
	ID               int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Height           int64     `boil:"height" json:"height" toml:"height" yaml:"height"`
	ValidatorAddress string    `boil:"validator_address" json:"validatorAddress" toml:"validatorAddress" yaml:"validatorAddress"`
	EventType        string    `boil:"event_type" json:"eventType" toml:"eventType" yaml:"eventType"`
	Counter          int64     `boil:"counter" json:"counter" toml:"counter" yaml:"counter"`
	Reason           string    `boil:"reason" json:"reason" toml:"reason" yaml:"reason"`
	CreatedAt        time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt        time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt        null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *slashingEventR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L slashingEventL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SlashingEventColumns = struct {
	ID               string
	Height           string
	ValidatorAddress string
	EventType        string
	Counter          string
	Reason           string
	CreatedAt        string
	UpdatedAt        string
	DeletedAt        string
}{
	ID:               "id",
	Height:           "height",
	ValidatorAddress: "validator_address",
	EventType:        "event_type",
	Counter:          "counter",
	Reason:           "reason",
	CreatedAt:        "created_at",
	UpdatedAt:        "updated_at",
	DeletedAt:        "deleted_at",
}

// Generated where

var SlashingEventWhere = struct {
	ID               whereHelperint64
	Height           whereHelperint64
	ValidatorAddress whereHelperstring
	EventType        whereHelperstring
	Counter          whereHelperint64
	Reason           whereHelperstring
	CreatedAt        whereHelpertime_Time
	UpdatedAt        whereHelpertime_Time
	DeletedAt        whereHelpernull_Time
}{
	ID:               whereHelperint64{field: "\"slashing_events\".\"id\""},
	Height:           whereHelperint64{field: "\"slashing_events\".\"height\""},
	ValidatorAddress: whereHelperstring{field: "\"slashing_events\".\"validator_address\""},
	EventType:        whereHelperstring{field: "\"slashing_events\".\"event_type\""},
	Counter:          whereHelperint64{field: "\"slashing_events\".\"counter\""},
	Reason:           whereHelperstring{field: "\"slashing_events\".\"reason\""},
	CreatedAt:        whereHelpertime_Time{field: "\"slashing_events\".\"created_at\""},
	UpdatedAt:        whereHelpertime_Time{field: "\"slashing_events\".\"updated_at\""},
	DeletedAt:        whereHelpernull_Time{field: "\"slashing_events\".\"deleted_at\""},
}

// SlashingEventRels is where relationship names are stored.
var SlashingEventRels = struct {
}{}

// slashingEventR is where relationships are stored.
type slashingEventR struct {
}

// NewStruct creates a new relationship struct
func (*slashingEventR) NewStruct() *slashingEventR {
	return &slashingEventR{}
}

// slashingEventL is where Load methods for each relationship are stored.
type slashingEventL struct{}

var (
	slashingEventAllColumns            = []string{"id", "height", "validator_address", "event_type", "counter", "reason", "created_at", "updated_at", "deleted_at"}
	slashingEventColumnsWithoutDefault = []string{"height", "validator_address", "event_type", "deleted_at"}
	slashingEventColumnsWithDefault    = []string{"id", "counter", "reason", "created_at", "updated_at"}
	slashingEventPrimaryKeyColumns     = []string{"id"}
)

type (
	// SlashingEventSlice is an alias for a slice of pointers to SlashingEvent.
	// This should generally be used opposed to []SlashingEvent.
	SlashingEventSlice []*SlashingEvent

	slashingEventQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	slashingEventType                 = reflect.TypeOf(&SlashingEvent{})
	slashingEventMapping              = queries.MakeStructMapping(slashingEventType)
	slashingEventPrimaryKeyMapping, _ = queries.BindMapping(slashingEventType, slashingEventMapping, slashingEventPrimaryKeyColumns)
	slashingEventInsertCacheMut       sync.RWMutex
	slashingEventInsertCache          = make(map[string]insertCache)
	slashingEventUpdateCacheMut       sync.RWMutex
	slashingEventUpdateCache          = make(map[string]updateCache)
	slashingEventUpsertCacheMut       sync.RWMutex
	slashingEventUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single slashingEvent record from the query.
func (q slashingEventQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SlashingEvent, error) {
	o := &SlashingEvent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for slashing_events")
	}

	return o, nil
}

// All returns all SlashingEvent records from the query.
func (q slashingEventQuery) All(ctx context.Context, exec boil.ContextExecutor) (SlashingEventSlice, error) {
	var o []*SlashingEvent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SlashingEvent slice")
	}

	return o, nil
}

// Count returns the count of all SlashingEvent records in the query.
func (q slashingEventQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count slashing_events rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q slashingEventQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if slashing_events exists")
	}

	return count > 0, nil
}

// SlashingEvents retrieves all the records using an executor.
func SlashingEvents(mods ...qm.QueryMod) slashingEventQuery {
	mods = append(mods, qm.From("\"slashing_events\""))
	return slashingEventQuery{NewQuery(mods...)}
}

// FindSlashingEvent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSlashingEvent(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SlashingEvent, error) {
	slashingEventObj := &SlashingEvent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"slashing_events\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, slashingEventObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from slashing_events")
	}

	return slashingEventObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SlashingEvent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no slashing_events provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(slashingEventColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	slashingEventInsertCacheMut.RLock()
	cache, cached := slashingEventInsertCache[key]
	slashingEventInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			slashingEventAllColumns,
			slashingEventColumnsWithDefault,
			slashingEventColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(slashingEventType, slashingEventMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(slashingEventType, slashingEventMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"slashing_events\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"slashing_events\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into slashing_events")
	}

	if !cached {
		slashingEventInsertCacheMut.Lock()
		slashingEventInsertCache[key] = cache
		slashingEventInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SlashingEvent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SlashingEvent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	slashingEventUpdateCacheMut.RLock()
	cache, cached := slashingEventUpdateCache[key]
	slashingEventUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			slashingEventAllColumns,
			slashingEventPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update slashing_events, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"slashing_events\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, slashingEventPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(slashingEventType, slashingEventMapping, append(wl, slashingEventPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update slashing_events row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for slashing_events")
	}

	if !cached {
		slashingEventUpdateCacheMut.Lock()
		slashingEventUpdateCache[key] = cache
		slashingEventUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q slashingEventQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for slashing_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for slashing_events")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SlashingEventSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slashingEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"slashing_events\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, slashingEventPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in slashingEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all slashingEvent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SlashingEvent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no slashing_events provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(slashingEventColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	slashingEventUpsertCacheMut.RLock()
	cache, cached := slashingEventUpsertCache[key]
	slashingEventUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			slashingEventAllColumns,
			slashingEventColumnsWithDefault,
			slashingEventColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			slashingEventAllColumns,
			slashingEventPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert slashing_events, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(slashingEventPrimaryKeyColumns))
			copy(conflict, slashingEventPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"slashing_events\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(slashingEventType, slashingEventMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(slashingEventType, slashingEventMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert slashing_events")
	}

	if !cached {
		slashingEventUpsertCacheMut.Lock()
		slashingEventUpsertCache[key] = cache
		slashingEventUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SlashingEvent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SlashingEvent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SlashingEvent provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), slashingEventPrimaryKeyMapping)
	sql := "DELETE FROM \"slashing_events\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from slashing_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for slashing_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q slashingEventQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no slashingEventQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from slashing_events")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for slashing_events")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SlashingEventSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slashingEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"slashing_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, slashingEventPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from slashingEvent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for slashing_events")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SlashingEvent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSlashingEvent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlashingEventSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SlashingEventSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slashingEventPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"slashing_events\".* FROM \"slashing_events\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, slashingEventPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SlashingEventSlice")
	}

	*o = slice

	return nil
}

// SlashingEventExists checks if the SlashingEvent row exists.
func SlashingEventExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"slashing_events\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if slashing_events exists")
	}

	return exists, nil
}
