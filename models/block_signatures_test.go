// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBlockSignatures(t *testing.T) {
	t.Parallel()

	query := BlockSignatures()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBlockSignaturesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockSignaturesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BlockSignatures().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockSignaturesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlockSignatureSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBlockSignaturesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BlockSignatureExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BlockSignature exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BlockSignatureExists to return true, but got false.")
	}
}

func testBlockSignaturesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	blockSignatureFound, err := FindBlockSignature(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if blockSignatureFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBlockSignaturesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BlockSignatures().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBlockSignaturesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BlockSignatures().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBlockSignaturesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	blockSignatureOne := &BlockSignature{}
	blockSignatureTwo := &BlockSignature{}
	if err = randomize.Struct(seed, blockSignatureOne, blockSignatureDBTypes, false, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}
	if err = randomize.Struct(seed, blockSignatureTwo, blockSignatureDBTypes, false, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blockSignatureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blockSignatureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BlockSignatures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBlockSignaturesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	blockSignatureOne := &BlockSignature{}
	blockSignatureTwo := &BlockSignature{}
	if err = randomize.Struct(seed, blockSignatureOne, blockSignatureDBTypes, false, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}
	if err = randomize.Struct(seed, blockSignatureTwo, blockSignatureDBTypes, false, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = blockSignatureOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = blockSignatureTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBlockSignaturesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlockSignaturesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(blockSignatureColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBlockSignatureToOneValidatorUsingValidator(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BlockSignature
	var foreign Validator

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, blockSignatureDBTypes, false, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, validatorDBTypes, false, validatorColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Validator struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ValidatorAddress = foreign.Address
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Validator().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.Address != foreign.Address {
		t.Errorf("want: %v, got %v", foreign.Address, check.Address)
	}

	slice := BlockSignatureSlice{&local}
	if err = local.L.LoadValidator(ctx, tx, false, (*[]*BlockSignature)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Validator == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Validator = nil
	if err = local.L.LoadValidator(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Validator == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBlockSignatureToOneSetOpValidatorUsingValidator(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BlockSignature
	var b, c Validator

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, blockSignatureDBTypes, false, strmangle.SetComplement(blockSignaturePrimaryKeyColumns, blockSignatureColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, validatorDBTypes, false, strmangle.SetComplement(validatorPrimaryKeyColumns, validatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, validatorDBTypes, false, strmangle.SetComplement(validatorPrimaryKeyColumns, validatorColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Validator{&b, &c} {
		err = a.SetValidator(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Validator != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ValidatorAddressBlockSignatures[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ValidatorAddress != x.Address {
			t.Error("foreign key was wrong value", a.ValidatorAddress)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ValidatorAddress))
		reflect.Indirect(reflect.ValueOf(&a.ValidatorAddress)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ValidatorAddress != x.Address {
			t.Error("foreign key was wrong value", a.ValidatorAddress, x.Address)
		}
	}
}

func testBlockSignaturesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlockSignaturesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BlockSignatureSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBlockSignaturesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BlockSignatures().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	blockSignatureDBTypes = map[string]string{`ID`: `integer`, `Height`: `bigint`, `Round`: `integer`, `ValidatorAddress`: `text`, `Flag`: `integer`, `Timestamp`: `timestamp without time zone`, `Hash`: `text`, `VotingPower`: `integer`, `ProposerPriority`: `integer`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testBlockSignaturesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(blockSignaturePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(blockSignatureAllColumns) == len(blockSignaturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignaturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBlockSignaturesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(blockSignatureAllColumns) == len(blockSignaturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BlockSignature{}
	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignatureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, blockSignatureDBTypes, true, blockSignaturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(blockSignatureAllColumns, blockSignaturePrimaryKeyColumns) {
		fields = blockSignatureAllColumns
	} else {
		fields = strmangle.SetComplement(
			blockSignatureAllColumns,
			blockSignaturePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BlockSignatureSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBlockSignaturesUpsert(t *testing.T) {
	t.Parallel()

	if len(blockSignatureAllColumns) == len(blockSignaturePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BlockSignature{}
	if err = randomize.Struct(seed, &o, blockSignatureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BlockSignature: %s", err)
	}

	count, err := BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, blockSignatureDBTypes, false, blockSignaturePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BlockSignature struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BlockSignature: %s", err)
	}

	count, err = BlockSignatures().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
