// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSyncLogs(t *testing.T) {
	t.Parallel()

	query := SyncLogs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSyncLogsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSyncLogsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SyncLogs().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSyncLogsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SyncLogSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSyncLogsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SyncLogExists(ctx, tx, o.BlockHeight)
	if err != nil {
		t.Errorf("Unable to check if SyncLog exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SyncLogExists to return true, but got false.")
	}
}

func testSyncLogsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	syncLogFound, err := FindSyncLog(ctx, tx, o.BlockHeight)
	if err != nil {
		t.Error(err)
	}

	if syncLogFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSyncLogsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SyncLogs().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSyncLogsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SyncLogs().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSyncLogsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	syncLogOne := &SyncLog{}
	syncLogTwo := &SyncLog{}
	if err = randomize.Struct(seed, syncLogOne, syncLogDBTypes, false, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}
	if err = randomize.Struct(seed, syncLogTwo, syncLogDBTypes, false, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = syncLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = syncLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SyncLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSyncLogsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	syncLogOne := &SyncLog{}
	syncLogTwo := &SyncLog{}
	if err = randomize.Struct(seed, syncLogOne, syncLogDBTypes, false, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}
	if err = randomize.Struct(seed, syncLogTwo, syncLogDBTypes, false, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = syncLogOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = syncLogTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSyncLogsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSyncLogsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(syncLogColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSyncLogsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSyncLogsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SyncLogSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSyncLogsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SyncLogs().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	syncLogDBTypes = map[string]string{`BlockHeight`: `bigint`, `Processed`: `boolean`, `Retries`: `integer`, `Step`: `integer`, `NextRetry`: `timestamp without time zone`, `SyncedAt`: `timestamp without time zone`, `CreatedAt`: `timestamp without time zone`, `UpdatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_              = bytes.MinRead
)

func testSyncLogsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(syncLogPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(syncLogAllColumns) == len(syncLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSyncLogsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(syncLogAllColumns) == len(syncLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SyncLog{}
	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, syncLogDBTypes, true, syncLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(syncLogAllColumns, syncLogPrimaryKeyColumns) {
		fields = syncLogAllColumns
	} else {
		fields = strmangle.SetComplement(
			syncLogAllColumns,
			syncLogPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SyncLogSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSyncLogsUpsert(t *testing.T) {
	t.Parallel()

	if len(syncLogAllColumns) == len(syncLogPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SyncLog{}
	if err = randomize.Struct(seed, &o, syncLogDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SyncLog: %s", err)
	}

	count, err := SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, syncLogDBTypes, false, syncLogPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SyncLog struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SyncLog: %s", err)
	}

	count, err = SyncLogs().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
