// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Block is an object representing the database table.
type Block struct {
	Height          int64     `boil:"height" json:"height" toml:"height" yaml:"height"`
	Hash            string    `boil:"hash" json:"hash" toml:"hash" yaml:"hash"`
	NumTXS          int       `boil:"num_txs" json:"numTXS" toml:"numTXS" yaml:"numTXS"`
	TotalGas        int64     `boil:"total_gas" json:"totalGas" toml:"totalGas" yaml:"totalGas"`
	ProposerAddress string    `boil:"proposer_address" json:"proposerAddress" toml:"proposerAddress" yaml:"proposerAddress"`
	Signatures      int       `boil:"signatures" json:"signatures" toml:"signatures" yaml:"signatures"`
	BlockTimestamp  time.Time `boil:"block_timestamp" json:"blockTimestamp" toml:"blockTimestamp" yaml:"blockTimestamp"`
	CreatedAt       time.Time `boil:"created_at" json:"createdAt" toml:"createdAt" yaml:"createdAt"`
	UpdatedAt       time.Time `boil:"updated_at" json:"updatedAt" toml:"updatedAt" yaml:"updatedAt"`
	DeletedAt       null.Time `boil:"deleted_at" json:"deletedAt,omitempty" toml:"deletedAt" yaml:"deletedAt,omitempty"`

	R *blockR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L blockL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BlockColumns = struct {
	Height          string
	Hash            string
	NumTXS          string
	TotalGas        string
	ProposerAddress string
	Signatures      string
	BlockTimestamp  string
	CreatedAt       string
	UpdatedAt       string
	DeletedAt       string
}{
	Height:          "height",
	Hash:            "hash",
	NumTXS:          "num_txs",
	TotalGas:        "total_gas",
	ProposerAddress: "proposer_address",
	Signatures:      "signatures",
	BlockTimestamp:  "block_timestamp",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	DeletedAt:       "deleted_at",
}

// Generated where

var BlockWhere = struct {
	Height          whereHelperint64
	Hash            whereHelperstring
	NumTXS          whereHelperint
	TotalGas        whereHelperint64
	ProposerAddress whereHelperstring
	Signatures      whereHelperint
	BlockTimestamp  whereHelpertime_Time
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	DeletedAt       whereHelpernull_Time
}{
	Height:          whereHelperint64{field: "\"blocks\".\"height\""},
	Hash:            whereHelperstring{field: "\"blocks\".\"hash\""},
	NumTXS:          whereHelperint{field: "\"blocks\".\"num_txs\""},
	TotalGas:        whereHelperint64{field: "\"blocks\".\"total_gas\""},
	ProposerAddress: whereHelperstring{field: "\"blocks\".\"proposer_address\""},
	Signatures:      whereHelperint{field: "\"blocks\".\"signatures\""},
	BlockTimestamp:  whereHelpertime_Time{field: "\"blocks\".\"block_timestamp\""},
	CreatedAt:       whereHelpertime_Time{field: "\"blocks\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"blocks\".\"updated_at\""},
	DeletedAt:       whereHelpernull_Time{field: "\"blocks\".\"deleted_at\""},
}

// BlockRels is where relationship names are stored.
var BlockRels = struct {
	Proposer           string
	HeightTransactions string
}{
	Proposer:           "Proposer",
	HeightTransactions: "HeightTransactions",
}

// blockR is where relationships are stored.
type blockR struct {
	Proposer           *Validator       `boil:"Proposer" json:"Proposer" toml:"Proposer" yaml:"Proposer"`
	HeightTransactions TransactionSlice `boil:"HeightTransactions" json:"HeightTransactions" toml:"HeightTransactions" yaml:"HeightTransactions"`
}

// NewStruct creates a new relationship struct
func (*blockR) NewStruct() *blockR {
	return &blockR{}
}

// blockL is where Load methods for each relationship are stored.
type blockL struct{}

var (
	blockAllColumns            = []string{"height", "hash", "num_txs", "total_gas", "proposer_address", "signatures", "block_timestamp", "created_at", "updated_at", "deleted_at"}
	blockColumnsWithoutDefault = []string{"height", "hash", "proposer_address", "signatures", "block_timestamp", "deleted_at"}
	blockColumnsWithDefault    = []string{"num_txs", "total_gas", "created_at", "updated_at"}
	blockPrimaryKeyColumns     = []string{"height"}
)

type (
	// BlockSlice is an alias for a slice of pointers to Block.
	// This should generally be used opposed to []Block.
	BlockSlice []*Block

	blockQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	blockType                 = reflect.TypeOf(&Block{})
	blockMapping              = queries.MakeStructMapping(blockType)
	blockPrimaryKeyMapping, _ = queries.BindMapping(blockType, blockMapping, blockPrimaryKeyColumns)
	blockInsertCacheMut       sync.RWMutex
	blockInsertCache          = make(map[string]insertCache)
	blockUpdateCacheMut       sync.RWMutex
	blockUpdateCache          = make(map[string]updateCache)
	blockUpsertCacheMut       sync.RWMutex
	blockUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single block record from the query.
func (q blockQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Block, error) {
	o := &Block{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for blocks")
	}

	return o, nil
}

// All returns all Block records from the query.
func (q blockQuery) All(ctx context.Context, exec boil.ContextExecutor) (BlockSlice, error) {
	var o []*Block

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Block slice")
	}

	return o, nil
}

// Count returns the count of all Block records in the query.
func (q blockQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count blocks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q blockQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if blocks exists")
	}

	return count > 0, nil
}

// Proposer pointed to by the foreign key.
func (o *Block) Proposer(mods ...qm.QueryMod) validatorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"address\" = ?", o.ProposerAddress),
	}

	queryMods = append(queryMods, mods...)

	query := Validators(queryMods...)
	queries.SetFrom(query.Query, "\"validators\"")

	return query
}

// HeightTransactions retrieves all the transaction's Transactions with an executor via height column.
func (o *Block) HeightTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"height\"=?", o.Height),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadProposer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (blockL) LoadProposer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBlock interface{}, mods queries.Applicator) error {
	var slice []*Block
	var object *Block

	if singular {
		object = maybeBlock.(*Block)
	} else {
		slice = *maybeBlock.(*[]*Block)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockR{}
		}
		args = append(args, object.ProposerAddress)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockR{}
			}

			for _, a := range args {
				if a == obj.ProposerAddress {
					continue Outer
				}
			}

			args = append(args, obj.ProposerAddress)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`validators`),
		qm.WhereIn(`validators.address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Validator")
	}

	var resultSlice []*Validator
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Validator")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for validators")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for validators")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Proposer = foreign
		if foreign.R == nil {
			foreign.R = &validatorR{}
		}
		foreign.R.ProposerAddressBlocks = append(foreign.R.ProposerAddressBlocks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ProposerAddress == foreign.Address {
				local.R.Proposer = foreign
				if foreign.R == nil {
					foreign.R = &validatorR{}
				}
				foreign.R.ProposerAddressBlocks = append(foreign.R.ProposerAddressBlocks, local)
				break
			}
		}
	}

	return nil
}

// LoadHeightTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (blockL) LoadHeightTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBlock interface{}, mods queries.Applicator) error {
	var slice []*Block
	var object *Block

	if singular {
		object = maybeBlock.(*Block)
	} else {
		slice = *maybeBlock.(*[]*Block)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &blockR{}
		}
		args = append(args, object.Height)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &blockR{}
			}

			for _, a := range args {
				if a == obj.Height {
					continue Outer
				}
			}

			args = append(args, obj.Height)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.height in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if singular {
		object.R.HeightTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Block = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Height == foreign.Height {
				local.R.HeightTransactions = append(local.R.HeightTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Block = local
				break
			}
		}
	}

	return nil
}

// SetProposer of the block to the related item.
// Sets o.R.Proposer to related.
// Adds o to related.R.ProposerAddressBlocks.
func (o *Block) SetProposer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Validator) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"blocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"proposer_address"}),
		strmangle.WhereClause("\"", "\"", 2, blockPrimaryKeyColumns),
	)
	values := []interface{}{related.Address, o.Height}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ProposerAddress = related.Address
	if o.R == nil {
		o.R = &blockR{
			Proposer: related,
		}
	} else {
		o.R.Proposer = related
	}

	if related.R == nil {
		related.R = &validatorR{
			ProposerAddressBlocks: BlockSlice{o},
		}
	} else {
		related.R.ProposerAddressBlocks = append(related.R.ProposerAddressBlocks, o)
	}

	return nil
}

// AddHeightTransactions adds the given related objects to the existing relationships
// of the block, optionally inserting them as new records.
// Appends related to o.R.HeightTransactions.
// Sets related.R.Block appropriately.
func (o *Block) AddHeightTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Height = o.Height
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"height"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.Height, rel.Hash}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Height = o.Height
		}
	}

	if o.R == nil {
		o.R = &blockR{
			HeightTransactions: related,
		}
	} else {
		o.R.HeightTransactions = append(o.R.HeightTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Block: o,
			}
		} else {
			rel.R.Block = o
		}
	}
	return nil
}

// Blocks retrieves all the records using an executor.
func Blocks(mods ...qm.QueryMod) blockQuery {
	mods = append(mods, qm.From("\"blocks\""))
	return blockQuery{NewQuery(mods...)}
}

// FindBlock retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBlock(ctx context.Context, exec boil.ContextExecutor, height int64, selectCols ...string) (*Block, error) {
	blockObj := &Block{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"blocks\" where \"height\"=$1", sel,
	)

	q := queries.Raw(query, height)

	err := q.Bind(ctx, exec, blockObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from blocks")
	}

	return blockObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Block) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blocks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(blockColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	blockInsertCacheMut.RLock()
	cache, cached := blockInsertCache[key]
	blockInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			blockAllColumns,
			blockColumnsWithDefault,
			blockColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(blockType, blockMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(blockType, blockMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"blocks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"blocks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into blocks")
	}

	if !cached {
		blockInsertCacheMut.Lock()
		blockInsertCache[key] = cache
		blockInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Block.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Block) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	blockUpdateCacheMut.RLock()
	cache, cached := blockUpdateCache[key]
	blockUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			blockAllColumns,
			blockPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update blocks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"blocks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, blockPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(blockType, blockMapping, append(wl, blockPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update blocks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for blocks")
	}

	if !cached {
		blockUpdateCacheMut.Lock()
		blockUpdateCache[key] = cache
		blockUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q blockQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for blocks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BlockSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"blocks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, blockPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in block slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all block")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Block) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no blocks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(blockColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	blockUpsertCacheMut.RLock()
	cache, cached := blockUpsertCache[key]
	blockUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			blockAllColumns,
			blockColumnsWithDefault,
			blockColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			blockAllColumns,
			blockPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert blocks, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(blockPrimaryKeyColumns))
			copy(conflict, blockPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"blocks\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(blockType, blockMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(blockType, blockMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert blocks")
	}

	if !cached {
		blockUpsertCacheMut.Lock()
		blockUpsertCache[key] = cache
		blockUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Block record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Block) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Block provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), blockPrimaryKeyMapping)
	sql := "DELETE FROM \"blocks\" WHERE \"height\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for blocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q blockQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no blockQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from blocks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blocks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BlockSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"blocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from block slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for blocks")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Block) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBlock(ctx, exec, o.Height)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BlockSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BlockSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), blockPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"blocks\".* FROM \"blocks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, blockPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BlockSlice")
	}

	*o = slice

	return nil
}

// BlockExists checks if the Block row exists.
func BlockExists(ctx context.Context, exec boil.ContextExecutor, height int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"blocks\" where \"height\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, height)
	}
	row := exec.QueryRowContext(ctx, sql, height)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if blocks exists")
	}

	return exists, nil
}
